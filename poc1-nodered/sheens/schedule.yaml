name: schedule
doc: |-
  One time or recurring schedule using our usual mix of cron and go syntax. At the scheduled time the message defined in parameters will be emitted on the out channel. The message can be blank.
paramspecs:
  template:
    doc: car/cru template placeholder
    primitiveType: objects
    required: false
  recurrent:
    doc: true if schedule should be repeated
    primitiveType: bool
    required: true
    default: false
  schedule:
    doc: schedule
    primitiveType: string
    required: true
  payload:
    doc: payload of message to emit when the schedule is due
    primitiveType: object
    required: false
    default: {}
  props:
    doc: props of message to emit when the schedule is due
    primitiveType: object
    required: false
    default: {}
  debug:
    doc: debug flag
    primitiveType: bool
    default: true
  funcional_type:
    doc: functional type of this component
    primitiveType: string
    required: true
    default: "condition"
  flow_type:
    doc: automation template id, for example notify_when_door_open
    primitiveType: string
    required: true
  flow_id:
    doc: automation instance id, for example aa7efeca-ae7c-4524-b570-af9d2e6ce751
    primitiveType: string
    required: true
  component_type:
    doc: component template id of this component
    primitiveType: string
    required: true
  component_id:
    doc: component instance id of this component; should use mid for this
    primitiveType: string
    required: true
  out:
    doc: out channel receives activate message when time is up
    primitiveType: out
    required: true
requires:
  - spec: timers
    id: timers
parsepatterns: true
patternsyntax: json
nodes:
  start:
    action:
      doc: currently only delay schedule allowed
      interpreter: goja
      source: |-
        // create timer here
        if (_.bindings.debug) {
          _.log({ "log": "DEBUG", "action": "schedule", "schedule": _.bindings.schedule, "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
        }
        //TODO: allow cancel timer
        // create timer
        var timer_id = _.props.mid + "-" + _.gensym();
        _.bindings.timer_id = timer_id;
        var message_id = _.gensym();
        var message = {
          "to" : { "mid": _.props.mid },
          "message_id": message_id,
          "payload": _.bindings.payload,
          "props" : _.bindings.props,
          "flow_type" : _.bindings.flow_type,
          "flow_id" : _.bindings.flow_id,
          "component_type" : "schedule",
          "component_id" : _.props.mid,
          "path_id" : "schedule"
        };
        _.out({to: { "mid": "timers" }, makeTimer: {id: timer_id, in: _.bindings.schedule, message: message}});
        return _.bindings;
    branching:
      branches:
      - target: listen
  listen:
    branching:
      type: message
      branches:
      - pattern: |
          { "message_id" : "?message_id", "payload" : "?payload", "props" : "?props", "flow_type" : "?flow_type", "flow_id" : "?flow_id", "component_type" : "?component_type", "component_id" : "?component_id", "path_id" : "schedule" }
        target: forward
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "disable" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "disable", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: listen_enable
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "reset" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "reset", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: reset
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "debug" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "debug", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: debug
  forward:
    action:
      interpreter: goja
      source: |-
        if (_.bindings.debug) {
          _.log({ "log": "DEBUG", "action": "forward", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
        }
        if (_.bindings.timer_id) {
          delete _.bindings.timer_id;
        }
        for (var i = 0; i < _.bindings.out.target_mids.length; i++) {
          // add flow meta data
          var msg = {
            "to" : { "mid": _.bindings.out.target_mids[i] },
            "component_out_label" : "out"
            "component_in_label" : _.bindings.out.component_in_labels[i],
            "payload" : _.bindings["?payload"],
            "props" : _.bindings["?props"],
            "timestamp" : Date.now(),
            "message_id" : _.bindings["?message_id"],
            "flow_type" : _.bindings.flow_type,
            "flow_id" : _.bindings.flow_id,
            "component_type" : "schedule",
            "component_id" : _.props.mid,
            "path_id" : _.bindings.out.path_id
          };
          // forward message
          _.out(msg);
        }
        // schedule next occurrence
        if (_.bindings.recurrent) {
          var timer_id = _.props.mid + "-" + _.gensym();
          _.bindings.timer_id = timer_id;
          var message = {
            "to" : { "mid": _.props.mid },
            "message_id": _.bindings["?message_id"],
            "payload": _.bindings["?payload"],
            "props" : _.bindings["?props"],
            "flow_type" : _.bindings.flow_type,
            "flow_id" : _.bindings.flow_id,
            "component_type" : "schedule",
            "component_id" : _.props.mid,
            "path_id" : "schedule"
          };
          _.out({to: "timers", makeTimer: {id: timer_id, in: _.bindings.schedule, message: message}});
        }
        // cleanup
        delete _.bindings["?message_id"];
        delete _.bindings["?flow_type"];
        delete _.bindings["?flow_id"];
        delete _.bindings["?component_type"];
        delete _.bindings["?component_id"];
        delete _.bindings["?component_in_label"];
        delete _.bindings["?component_out_label"];
        delete _.bindings["?path_id"];
        delete _.bindings["?payload"];
        delete _.bindings["?props"];
        return _.bindings;
    branching:
      branches:
      - target: listen
  listen_enable:
    branching:
      type: message
      branches:
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "enable" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "enable", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: listen
  reset:
    action:
      interpreter: goja
      source: |-
        if (_.bindings.debug) {
          _.log({ "log": "DEBUG", "action": "reset", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
        }
        if (_.bindings.timer_id) {
          _.out({to: { "mid": "timers" }, deleteTimer: _.bindings.timer_id});
          delete _.bindings.timer_id;
        }
        // delete all state information in bindings but retain initial bindings
        delete _.bindings["?message_id"];
        delete _.bindings["?flow_type"];
        delete _.bindings["?flow_id"];
        delete _.bindings["?component_type"];
        delete _.bindings["?component_id"];
        delete _.bindings["?component_in_label"];
        delete _.bindings["?component_out_label"];
        delete _.bindings["?path_id"];
        delete _.bindings["?payload"];
        delete _.bindings["?props"];
        // if other cleanup is necessary (timers, facts, etc.) do it here...
        return _.bindings;
    branching:
      branches:
      - target: start
  debug:
    action:
      interpreter: goja
      source: |-
        _.bindings.debug = !_.bindings.debug;
        _.log({ "log": "DEBUG", "action": "debug", "info": _.bindings.debug, "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
        return _.bindings;
    branching:
      branches:
      - target: listen
