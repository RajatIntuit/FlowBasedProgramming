name: motion
doc: |-
  Listens for external motion events. When a motion event is spotted it will be sent on the out
  channel. The sensor_ids parameter can be configured to listen for a specific sensor, a set of
  sensors or any sensor.
paramspecs:
  template:
    doc: car/cru template placeholder
    primitiveType: objects
    required: false
  sensor_ids:
    doc: array with ids of one or more motion sensors, if array is empty, any motion sensor will be accepted
    primitiveType: string
    required: true
  debug:
    doc: debug flag
    primitiveType: bool
    default: true
  funcional_type:
    doc: functional type of this component
    primitiveType: string
    required: true
    default: "trigger"
  flow_type:
    doc: automation template id
    primitiveType: string
    required: true
  flow_id:
    doc: automation instance id, for example aa7efeca-ae7c-4524-b570-af9d2e6ce751
    primitiveType: string
    required: true
  component_type:
    doc: component template id of this component
    primitiveType: string
    required: true
  component_id:
    doc: component instance id of this component; should use mid for this
    primitiveType: string
    required: true
  out:
    doc: out channel description
    primitiveType: out
    required: true

parsepatterns: true
patternsyntax: json
nodes:
  start:
    branching:
      branches:
      - target: listen
  listen:
    branching:
      type: message
      branches:
      - pattern: |
          { "properties": { "state" : "?state" }, "meta": { "id" : "?id", "friendlyName" : "?friendlyName", "iot:capabilities" : [ "motionSensor" ] } }
        guard:
          interpreter: goja
          source: |-
            var sensorok = false;
            if (_.bindings.sensor_ids.length == 0) {
              // any sensor
              sensorok = true;
            } else {
              // any sensor of a subset of sensors
              for (var i=0; i<_.bindings.sensor_ids.length; i++) {
                if (_.bindings["?id"] == _.bindings.sensor_ids[0]) {
                  sensorok = true;
                  break;
                }
              }
            }
            // check sensor state
            if (sensorok) {
              if (_.bindings["?state"] != "true") {
                sensorok = false;
              }
            }
            if (sensorok) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "motion", "info": "guard_continue", "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            } else {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "motion", "info": "guard_block", "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              _.bindings["block"] = true;
            }
            return _.bindings;
        target: motion
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "disable" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "disable", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: listen_enable
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "reset" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "reset", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: reset
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "debug" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "debug", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: debug
  motion:
    action:
      interpreter: goja
      source: |-
        if (_.bindings.debug) {
          _.log({ "log": "DEBUG", "action": "motion", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
        }
        // stop execution if guard says so
        if (_.bindings["block"] == true) {
          if (_.bindings.debug) {
            _.log({ "log": "DEBUG", "action": "motion", "info": "stop_execution", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
          }
          delete _.bindings["?state"];
          delete _.bindings["?id"];
          delete _.bindings["?friendlyName"];
          delete _.bindings["block"];
          return _.bindings;
        }
        // assemble payload
        var payload = {
          "properties": { "state" : _.bindings["?state"] },
          "meta": { "id" : _.bindings["?id"], "friendlyName" : _.bindings["?friendlyName"], "iot:capabilities" : ["motionSensor"] }
        };
        // generate message id; consider using motion id as message id
        var message_id = _.gensym();
        // pass message to all target mid's
        for (var i = 0; i < _.bindings.out.target_mids.length; i++) {
          // add flow meta data
          var msg = {
            "to" : { "mid": _.bindings.out.target_mids[i] },
            "component_out_label" : "out"
            "component_in_label" : _.bindings.out.component_in_labels[i],
            "payload" : payload,
            "props" : {},
            "timestamp" : Date.now(),
            "message_id" : message_id,
            "flow_type" : _.bindings.flow_type,
            "flow_id" : _.bindings.flow_id,
            "component_type" : "motion",
            "component_id" : _.props.mid,
            "path_id" : _.bindings.out.path_id
          };
          // send message
          _.out(msg);
        }
        // cleanup
        delete _.bindings["?state"];
        delete _.bindings["?id"];
        delete _.bindings["?friendlyName"];
        return _.bindings;
    branching:
      branches:
      - target: listen
  listen_enable:
    branching:
      type: message
      branches:
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "enable" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "enable", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: listen
  reset:
    action:
      interpreter: goja
      source: |-
        if (_.bindings.debug) {
          _.log({ "log": "DEBUG", "action": "reset", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
        }
        // delete all state information in bindings but retain initial bindings
        delete _.bindings["?message_id"];
        delete _.bindings["?flow_type"];
        delete _.bindings["?flow_id"];
        delete _.bindings["?component_type"];
        delete _.bindings["?component_id"];
        delete _.bindings["?component_in_label"];
        delete _.bindings["?component_out_label"];
        delete _.bindings["?path_id"];
        delete _.bindings["?payload"];
        delete _.bindings["?props"];
        // if other cleanup is necessary (timers, facts, etc.) do it here...
        return _.bindings;
    branching:
      branches:
      - target: start
  debug:
    action:
      interpreter: goja
      source: |-
        _.bindings.debug = !_.bindings.debug;
        _.log({ "log": "DEBUG", "action": "debug", "info": _.bindings.debug, "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
        return _.bindings;
    branching:
      branches:
      - target: listen
