name: generate_notification
doc: |-
  Generates an arbitrary notification message and title string based on parameters collected from
  the in message and injects them into the props section of the message before forwarding on the out channel.
paramspecs:
  template:
    doc: car/cru template placeholder
    primitiveType: objects
    required: false
  notification_message:
    doc: a template for the notification message using mustache notation
    primitiveType: string
    required: true
  notification_title:
    doc: a template for the notification title using mustache notation
    primitiveType: string
    required: true
  debug:
    doc: debug flag
    primitiveType: bool
    default: true
  funcional_type:
    doc: functional type of this component
    primitiveType: string
    required: true
    default: "condition"
  flow_type:
    doc: automation template id, for example notify_when_door_open
    primitiveType: string
    required: true
  flow_id:
    doc: automation instance id, for example aa7efeca-ae7c-4524-b570-af9d2e6ce751
    primitiveType: string
    required: true
  component_type:
    doc: component template id of this component
    primitiveType: string
    required: true
  component_id:
    doc: component instance id of this component; should use mid for this
    primitiveType: string
    required: true
  in:
    doc: in channel description
    primitiveType: in
    required: true
  out:
    doc: out channel description
    primitiveType: out
    required: true
parsepatterns: true
patternsyntax: json
nodes:
  start:
    branching:
      branches:
      - target: listen
  listen:
    branching:
      type: message
      branches:
      - pattern: |
          { "message_id" : "?message_id", "payload" : "?payload", "props" : "?props", "flow_type" : "?flow_type", "flow_id" : "?flow_id", "component_type" : "?component_type", "component_id" : "?component_id", "component_out_label" : "?component_out_label", "component_in_label" : "?component_in_label", "path_id" : "?path_id" }
        target: in
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "disable" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "disable", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: listen_enable
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "reset" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "reset", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: reset
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "debug" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "debug", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: debug
  in:
    action:
      interpreter: goja
      source: |-
        if (_.bindings.debug) {
          _.log({ "log": "DEBUG", "action": "generate_notification", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
        }
        var payload = _.bindings["?payload"];
        var props = _.bindings["?props"];
        // generate message
        var message = _.bindings.notification_message;
        while (message.indexOf("{{") >= 0 && message.indexOf("}}") >= 0) {
          var si = message.indexOf("{{");
          var ei = message.indexOf("}}");
          var keyword = message.substring(si+2,ei);
          var value = eval(keyword);
          message = message.substring(0,si) + value + message.substring(ei+2,message.length);
        }
        // generate title
        var title = _.bindings.notification_title;
        while (title.indexOf("{{") >= 0 && title.indexOf("}}") >= 0) {
          var si = title.indexOf("{{");
          var ei = title.indexOf("}}");
          var keyword = title.substring(si+2,ei);
          var value = eval(keyword);
          title = title.substring(0,si) + value + title.substring(ei+2,title.length);
        }
        var notification = { "message" : message, "title": title};
        // inject into payload
        props.notification = notification;
        for (var i = 0; i < _.bindings.out.target_mids.length; i++) {
          // add flow meta data
          var msg = {
            "to" : { "mid": _.bindings.out.target_mids[i] },
            "component_out_label" : "out"
            "component_in_label" : _.bindings.out.component_in_labels[i],
            "payload" : payload,
            "props" : _.bindings["?props"],
            "timestamp" : Date.now(),
            "message_id" : _.bindings["?message_id"],
            "flow_type" : _.bindings.flow_type,
            "flow_id" : _.bindings.flow_id ,
            "component_type" : "generate_notification",
            "component_id" : _.props.mid,
            "path_id" : _.bindings.out.path_id
          };
          // forward message
          _.out(msg);
        }
        // cleanup
        delete _.bindings["?message_id"];
        delete _.bindings["?flow_type"];
        delete _.bindings["?flow_id"];
        delete _.bindings["?component_type"];
        delete _.bindings["?component_id"];
        delete _.bindings["?component_in_label"];
        delete _.bindings["?component_out_label"];
        delete _.bindings["?path_id"];
        delete _.bindings["?payload"];
        delete _.bindings["?props"];
        return _.bindings;
    branching:
      branches:
      - target: listen
  listen_enable:
    branching:
      type: message
      branches:
      - pattern: |
          { "flow_id" : "?flow_id", "action" : "enable" }
        guard:
          interpreter: goja
          source: |-
            if (_.bindings.flow_id === _.bindings["?flow_id"]) {
              if (_.bindings.debug) {
                _.log({ "log": "DEBUG", "action": "enable", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
              }
              return _.bindings;
            }
            return null;
        target: listen
  reset:
    action:
      interpreter: goja
      source: |-
        if (_.bindings.debug) {
          _.log({ "log": "DEBUG", "action": "reset", "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
        }
        // delete all state information in bindings but retain initial bindings
        delete _.bindings["?message_id"];
        delete _.bindings["?flow_type"];
        delete _.bindings["?flow_id"];
        delete _.bindings["?component_type"];
        delete _.bindings["?component_id"];
        delete _.bindings["?component_in_label"];
        delete _.bindings["?component_out_label"];
        delete _.bindings["?path_id"];
        delete _.bindings["?payload"];
        delete _.bindings["?props"];
        // if other cleanup is necessary (timers, facts, etc.) do it here...
        return _.bindings;
    branching:
      branches:
      - target: start
  debug:
    action:
      interpreter: goja
      source: |-
        _.bindings.debug = !_.bindings.debug;
        _.log({ "log": "DEBUG", "action": "debug", "info": _.bindings.debug, "flow_type": _.bindings.flow_type, "flow_id": _.bindings.flow_id, "component_type": _.bindings.component_type, "component_id":  _.bindings.component_id});
        return _.bindings;
    branching:
      branches:
      - target: listen
